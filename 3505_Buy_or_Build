#include <cstdio>
#include <cstring>
#include <vector>
#include <utility>
#include <algorithm>
#include <queue>

using namespace std;

int n, q;
vector<int> subnets[8];
int costs[8];
pair<int, int> coords[1000];
int total_weight;
int weight_mat[1000][1000];
int parent[1000];
vector<pair<int, int>> edges(1000);
vector<pair<int, int>> min_net_tree;
int edges_count = 0;
int elements_in_tree = 0;

int operator^(pair<int, int>& c1, pair<int, int>& c2) {
    return (c1.first - c2.first)*(c1.first - c2.first) + (c1.second - c2.second)*(c1.second- c2.second);
}

void initialize() {
    for (int i = 0; i < 8; ++i) {
        subnets[i].clear();
    }
    min_net_tree.clear();
}

//find_set with path compressing
int find_set(int i)
{
    int j = i;
    while(i != parent[i]) i = parent[i];
    while(parent[j] != i) {
        int tmp = parent[j];
        parent[j] = i;
        j = tmp;
    }
    return i;
}

void uni(int x, int y)
{
    parent[x] = y;
}

void kruskal() {
    elements_in_tree = 0;
    for (int i = 0; i < edges_count; ++i) {
        /*for (int i = 0; i < n; ++i) {
            printf("%d ", parent[i]+1);
        }
        printf("\n");*/

        auto& e = edges[i];

        int x = find_set(e.first);
        int y = find_set(e.second);

        //printf("%d %d\n", e.first + 1, e.second + 1);
        if (x == y) continue;
        uni(x, y);
        min_net_tree.push_back(e);
        if (elements_in_tree++ == n - 1) break;
        total_weight += weight_mat[e.first][e.second];
    }
}

int main()
{
    int t;
    scanf("%d\n", &t);

    while(t--) {
        scanf("%d %d\n", &n, &q);

        initialize();

        int ind = 0;
        while(ind < q) {
            int nc;
            scanf("%d %d", &nc, &costs[ind]);

            int city;
            for (int i = 0; i < nc; ++i) {
                scanf("%d", &city);
                subnets[ind].push_back(city - 1);
            }
            ind++;
        }

        for (int i = 0; i < n; ++i) {
            int r, c;
            scanf("%d %d\n", &r, &c);
            coords[i].first = r;
            coords[i].second = c;
            parent[i] = i;
        }

        //printf("<solution>\n");

        edges.clear();
        edges_count = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int dist = coords[i]^coords[j];
                weight_mat[i][j] = dist;
                weight_mat[j][i] = dist;
                edges.push_back(pair<int, int>(i, j));
                edges_count++;
            }
        }

        sort(edges.begin(), edges.begin() + edges_count, [&] (pair<int, int> p1, pair<int, int> p2) {
           return weight_mat[p1.first][p1.second] < weight_mat[p2.first][p2.second];
        });

        total_weight = 0;
        kruskal();

        for (int i = 0; i < (1 << q); ++i) {
            int temp = 0;

            for (int j = 0; j < n; ++j) {
                parent[j] = j;
            }

            for (int sub = 0; sub < q; ++sub) {
                if (i & (1<<sub)) {
                    temp += costs[sub];
                    //printf("c%d ", costs[sub]);
                    for (size_t j = 0; j < subnets[sub].size(); ++j) {
                        for (size_t k = j+1; k < subnets[sub].size(); ++k) {
                            auto from = subnets[sub][j];
                            auto to = subnets[sub][k];

                            int x = find_set(from);
                            int y = find_set(to);
                            if (x == y) continue;

                            uni(x, y);
                        }
                    }
                }
            }

            pair<int, int>* edge;
            for (int k = 0; k < elements_in_tree; ++k) {
                edge = &min_net_tree[k];

                int x = find_set(edge->first);
                int y = find_set(edge->second);
                if (x == y) continue;

                uni(x, y);

                temp += weight_mat[edge->first][edge->second];
            }

            total_weight = min(temp, total_weight);
        }

        printf("%d\n", total_weight);
        if (t) printf("\n");
    }

    return 0;
}
